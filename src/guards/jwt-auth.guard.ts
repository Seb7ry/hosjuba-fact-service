import { CanActivate, ExecutionContext, Injectable, UnauthorizedException, Logger } from "@nestjs/common";
import { JwtService, TokenExpiredError, JsonWebTokenError } from "@nestjs/jwt";

/**
 * Guardi√°n de autenticaci√≥n que protege rutas al verificar el token de acceso JWT.
 * 
 * - Se asegura de que la solicitud tenga un token v√°lido en la cabecera `Authorization`.
 * - Evita que se usen tokens de refresco en rutas protegidas.
 * - Registra los intentos de acceso y los errores a trav√©s de logs.
 */
@Injectable()
export class JwtAuthGuard implements CanActivate {
    private readonly logger = new Logger(JwtAuthGuard.name);

    constructor(private readonly jwtService: JwtService) {}

    /**
     * M√©todo que determina si la solicitud puede continuar o no.
     * 
     * @param context - Contexto de ejecuci√≥n de la solicitud.
     * @returns `true` si el token es v√°lido y pertenece a un access token, de lo contrario, lanza un error.
     */
    canActivate(context: ExecutionContext): boolean {
        const request = context.switchToHttp().getRequest();
        const authHeader = request.headers.authorization;

        // Validamos si la cabecera de autorizaci√≥n est√° presente
        if (!authHeader) {
            this.logger.warn('Intento de acceso sin token de autenticaci√≥n.');
            throw new UnauthorizedException('No se proporcion√≥ un token de acceso.');
        }

        // Validamos que el formato del token sea correcto (debe comenzar con "Bearer ")
        const tokenParts = authHeader.split(' ');
        if (tokenParts.length !== 2 || tokenParts[0] !== 'Bearer') {
            this.logger.warn(`Formato incorrecto en el token de autenticaci√≥n. Header recibido: ${authHeader}`);
            throw new UnauthorizedException('Formato de token inv√°lido. Debe ser "Bearer <TOKEN>".');
        }

        // Extraemos el token
        const token = tokenParts[1];

        if (!token) {
            this.logger.warn('Token vac√≠o recibido en la cabecera de autorizaci√≥n.');
            throw new UnauthorizedException('El token de acceso no puede estar vac√≠o.');
        }

        try {
            // Verificamos y decodificamos el token
            const decoded = this.jwtService.verify(token);

            // Verificamos que el token no sea de refresco
            if (decoded.type === 'refresh') {
                this.logger.warn(`Intento de uso de token de refresco en autenticaci√≥n. Usuario: ${decoded.username}`);
                throw new UnauthorizedException('No puedes usar el token de refrescar para generar autorizaci√≥n a una solicitud.');
            }

            // Si el token es v√°lido, lo agregamos a la solicitud
            request.user = decoded;
            this.logger.log(`‚úÖ Autenticaci√≥n exitosa para el usuario: ${decoded.username}`);
            return true;
        } catch (error) {
            if (error instanceof TokenExpiredError) {
                this.logger.warn(`‚ö†Ô∏è Token expirado para la solicitud. Usuario desconocido. Detalles: ${error.message}`);
                throw new UnauthorizedException('Token de acceso expirado. Debes solicitar un nuevo access token.');
            } else if (error instanceof JsonWebTokenError) {
                this.logger.warn(`üö´ Token inv√°lido o manipulado. Detalles: ${error.message}`);
                throw new UnauthorizedException('Token de acceso inv√°lido o manipulado.');
            } else {
                this.logger.error(`‚ùå Error desconocido en la autenticaci√≥n. Detalles: ${error.message}`);
                throw new UnauthorizedException('Error en la autenticaci√≥n.');
            }
        }
    }
}
