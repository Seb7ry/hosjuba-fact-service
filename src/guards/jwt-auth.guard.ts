import { CanActivate, ExecutionContext, Injectable, UnauthorizedException, Logger } from "@nestjs/common";
import { JwtService, TokenExpiredError, JsonWebTokenError } from "@nestjs/jwt";
import * as dotenv from 'dotenv';

/**
 * Carga las variables de entorno desde el archivo .env
 * Esta configuraci√≥n asegura que las variables de entorno est√©n disponibles
 * en el momento de la inicializaci√≥n del archivo, permitiendo que el
 * acceso a configuraciones sensibles (como las credenciales de la base de datos)
 * se realice de forma segura.
 */
dotenv.config(); 

/**
 * Guard que verifica la validez del token JWT en las solicitudes entrantes.
 * 
 * El `JwtAuthGuard` asegura que el token de autenticaci√≥n sea v√°lido y no haya expirado.
 * Este guard es utilizado para proteger rutas y garantizar que solo los usuarios autenticados
 * puedan acceder a ciertos recursos del sistema.
 * 
 * Si el token es inv√°lido o no est√° presente, se lanza una excepci√≥n `UnauthorizedException`.
 */
@Injectable()
export class JwtAuthGuard implements CanActivate {
    
    /**
     * Logger para registrar eventos relacionados con la autenticaci√≥n
     */
    private readonly logger = new Logger(JwtAuthGuard.name);

    /**
     * Constructor que inyecta el servicio de JWT.
     * 
     * @param jwtService Servicio de JWT para verificar y decodificar el token.
     */
    constructor(private readonly jwtService: JwtService) {}

    /**
     * M√©todo que verifica si la solicitud est√° autenticada.
     * 
     * Extrae el token de la cabecera `Authorization`, lo valida y verifica si el token est√°
     * asociado a un usuario v√°lido. Si la validaci√≥n es exitosa, permite que la solicitud contin√∫e,
     * de lo contrario, lanza una excepci√≥n `UnauthorizedException`.
     * 
     * @param context Contexto de la solicitud actual.
     * @returns {boolean} `true` si la solicitud est√° autenticada, `false` si no lo est√°.
     * @throws {UnauthorizedException} Si no se encuentra el token o es inv√°lido.
     */
    canActivate(context: ExecutionContext): boolean {
        const request = context.switchToHttp().getRequest();
        const authHeader = request.headers.authorization;

        if (!authHeader) {
            this.logger.warn('Intento de acceso sin token de autenticaci√≥n.');
            throw new UnauthorizedException('No se proporcion√≥ un token de acceso.');
        }

        const tokenParts = authHeader.split(' ');
        if (tokenParts.length !== 2 || tokenParts[0] !== 'Bearer') {
            this.logger.warn(`Formato incorrecto en el token de autenticaci√≥n. Header recibido: ${authHeader}`);
            throw new UnauthorizedException('Formato de token inv√°lido. Debe ser "Bearer <TOKEN>".');
        }

        const token = tokenParts[1];

        if (!token) {
            this.logger.warn('Token vac√≠o recibido en la cabecera de autorizaci√≥n.');
            throw new UnauthorizedException('El token de acceso no puede estar vac√≠o.');
        }

        try {
            const decoded = this.jwtService.verify(token, { secret: process.env.JWT_SECRET });
            if (decoded.type === 'refresh') {
                this.logger.warn(`Intento de uso de token de refresco en autenticaci√≥n. Usuario: ${decoded.username}`);
                throw new UnauthorizedException('No puedes usar el token de refrescar para generar autorizaci√≥n a una solicitud.');
            }

            request.user = decoded;
            this.logger.log(`‚úÖ Autenticaci√≥n exitosa para el usuario: ${decoded.username}`);
            return true;
        } catch (error) {
            if (error instanceof TokenExpiredError) {
                this.logger.warn(`‚ö†Ô∏è Token expirado para la solicitud. Usuario desconocido. Detalles: ${error.message}`);
                throw new UnauthorizedException('Token de acceso expirado. Debes solicitar un nuevo access token.');
            } else if (error instanceof JsonWebTokenError) {
                this.logger.warn(`üö´ Token inv√°lido o manipulado. Detalles: ${error.message}`);
                throw new UnauthorizedException('Token de acceso inv√°lido o manipulado.');
            } else {
                this.logger.error(`‚ùå Error desconocido en la autenticaci√≥n. Detalles: ${error.message}`);
                throw new UnauthorizedException('Error en la autenticaci√≥n.');
            }
        }
    }
}
